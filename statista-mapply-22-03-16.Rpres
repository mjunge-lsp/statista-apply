Some applications of the mapply function
========================================================
author: Martin Junge
date: 22-03-16
width: 1920
height: 1080

Overview
========================================================

- functional programming in R (recap)
  - https://github.com/mjunge-lsp/statista-apply/blob/master/statista-apply-21-02-12.md
- the apply family
  - apply
  - lapply
  - sapply
  - vapply
  - **mapply**
- Some applications from a medical data project

Functional programming in R
========================================================

- R as a *functional* and object-oriented programming language

"Everything that exists is an object.
Everything that happens is a function call."
â€” John Chambers

```{r plus}
`+`
1 + 2
`+`(1, 2)
```

apply instead of for-loops
========================================================

- apply functions make use of the nature of R as a functional language
- replace for-loops

```{r apply_for}
head(mtcars)

colmeans <- NULL
for (i in 1:ncol(mtcars))
{
  m <- mean(mtcars[, i])
  colmeans <- c(colmeans, m)
}
names(colmeans) <- names(mtcars)
colmeans
```


apply
========================================================

- most basic variant: `apply`

```{r apply_1}
head(mtcars)
apply(mtcars, MARGIN = 2, FUN = mean)
```

mapply /1
========================================================

The multivariate member of the apply function family

```{r mapply_1}
a <- c(seq(1, 10, 2))
a
b <- c(seq(20, 1, -4))
b

mapply(`+`, x = a, y = b)
a + b
```

mapply /2
========================================================

```{r mapply_2}
library(ranger)
fit_grid <- expand.grid(n_trees = c(100, 500), rep = c(TRUE, FALSE))
fit_grid
mod_rf <- mapply(ranger, num.trees = fit_grid$n_trees, replace = fit_grid$rep,
                 MoreArgs = list(formula = as.factor(am) ~ ., data = mtcars), SIMPLIFY = FALSE)
```

mapply /3
========================================================

```{r mapply_3}
str(mod_rf, max.level = 1)
```

mapply /4
========================================================

```{r mapply_4}
conf_mat_list <- lapply(mod_rf, function(x) x$confusion.matrix)
conf_mat_list
```